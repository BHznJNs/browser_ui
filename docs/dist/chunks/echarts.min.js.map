{"version":3,"file":"echarts.min.js","sources":["../../../frontend/scripts/importers/UnOverridedError.js","../../../frontend/utils/loadConfig.js","../../../common/default.config.js","../../../frontend/utils/languageSelector.js","../../../frontend/scripts/importers/dynamicImporter.js","../../../frontend/scripts/importers/charts/importer.js","../../../common/mergeObj.js","../../../common/debounce.js","../../../common/eventbus/inst.js","../../../common/eventbus/index.js","../../../frontend/scripts/importers/charts/echarts.js"],"sourcesContent":["export default class UnOverridedError extends Error {\r\n    constructor(name) {\r\n        super()\r\n        this.message =\r\n            `\"${name}\" is a abstract method that should be overrided.`\r\n    }\r\n}\r\n","import defaultConfig from \"../../common/default.config.js\"\r\nlet finalConfig = defaultConfig \r\ntry {\r\n    const configModule = await import(\"../../user/build.config.js\")\r\n    finalConfig = configModule.default\r\n} catch {}\r\n\r\nexport const config = finalConfig\r\n","/** @type {import(\"../types/index.d.ts\").SiteConfig} */\r\nexport default {\r\n    homepage: \"https://www.example.com/\",\r\n    title: \"Blog as Second Brain\",\r\n    description: \"Blog as Second Brain\",\r\n    language: \"en\",\r\n    pageSize: 20,\r\n\r\n    preview: {\r\n        port: 3030,\r\n        liveReload: true,\r\n    },\r\n\r\n    catalog: {\r\n        enable: true\r\n    },\r\n    fab: {\r\n        enable: true,\r\n        buttons: [\r\n            \"catalogSwitcher\",\r\n            \"downsizeText\",\r\n            \"enlargeText\",\r\n            \"backToParent\",\r\n            \"backToTop\",\r\n        ],\r\n    },\r\n    rss: {\r\n        enable: true,\r\n        size: 50,\r\n    },\r\n    newest: {\r\n        enable: true,\r\n        pageSize: 40,\r\n    },\r\n    search: {\r\n        enable: true,\r\n        pageThreshold: 30000\r\n    },\r\n\r\n    echartsOptions: {\r\n        tooltip: {\r\n            show: true,\r\n            backgroundColor: \"rgb(255,255,255,.9)\"\r\n        }\r\n    },\r\n\r\n    qrcodeOptions: {\r\n        width: 256,\r\n        height: 256,\r\n    }\r\n}\r\n","import { config } from \"./loadConfig.js\"\r\n\r\nconst currentLang = config.language\r\nconst langList = [\"zh\", \"en\"]\r\nfunction languageSelectorCreator(lang) {\r\n    for (const [index, langName] of Object.entries(langList)) {\r\n        if (lang === langName) {\r\n            return (...selections) => selections[index]\r\n        }\r\n    }\r\n    console.warn(\"Unexpected language: \" + lang)\r\n    // default returns English text\r\n    return (...selections) => selections[1]\r\n}\r\nconst languageSelector = languageSelectorCreator(currentLang)\r\nexport default languageSelector\r\n","import UnOverridedError from \"./UnOverridedError.js\"\r\nimport languageSelector from \"../../utils/languageSelector.js\"\r\n\r\nexport default class DynamicImporter {\r\n    static loadErrMsg   = languageSelector(\"加载失败\", \"load error\")\r\n    static renderErrMsg = languageSelector(\"渲染失败\", \"render error\")\r\n\r\n    name = \"\"\r\n    _module = null\r\n    _targetElList = null\r\n\r\n    async importModule(props) { throw new UnOverridedError(\"importModule\") }\r\n    async beforeRender(props) {}\r\n    loadCondition(props) { throw new UnOverridedError(\"loadCondition\") }\r\n    renderItem(el) { throw new UnOverridedError(\"renderItem\") }\r\n\r\n    renderAll(props) {\r\n        for (const el of this._targetElList()) {\r\n            try {\r\n                this.renderItem(el)\r\n            } catch(err) {\r\n                this.renderErrResolver(err, el)\r\n            }\r\n        }\r\n    }\r\n\r\n    loadErrResolver(err) {\r\n        console.error(err)\r\n        this._targetElList().forEach(el =>\r\n            el.textContent = this.name + \" \" + DynamicImporter.loadErrMsg)\r\n    }\r\n    renderErrResolver(err, el) {\r\n        console.error(err)\r\n        el.textContent = this.name + \" \" + DynamicImporter.renderErrMsg\r\n    }\r\n\r\n    async render(props) {\r\n        if (!this.loadCondition(props)) {\r\n            return\r\n        }\r\n        if (this._module === null) {\r\n            try {\r\n                this._module = await this.importModule(props)\r\n            } catch(err) {\r\n                this.loadErrResolver(err)\r\n                return\r\n            }\r\n        }\r\n        await this.beforeRender(props)\r\n        this.renderAll(props)\r\n    }\r\n}\r\n","import DynamicImporter from \"../dynamicImporter.js\"\r\nimport UnOverridedError from \"../UnOverridedError.js\"\r\nimport languageSelector from \"../../../utils/languageSelector.js\"\r\n\r\nexport default class ChartImporter extends DynamicImporter {\r\n    static loadErrMsg   = languageSelector(\"图表加载失败\", \"Chart load error\")\r\n    static renderErrMsg = languageSelector(\"图表渲染失败\", \"Chart render error\")\r\n\r\n    name = undefined\r\n\r\n    loadCondition() { return true }\r\n\r\n    loadErrResolver(err) {\r\n        console.error(err)\r\n        this._targetElList().forEach(el =>\r\n            el.textContent = ChartImporter.loadErrMsg)\r\n    }\r\n    renderErrResolver(err, el) {\r\n        console.error(err)\r\n        el.textContent = ChartImporter.renderErrMsg\r\n    }\r\n\r\n    renderItem(el, chartContent) { throw new UnOverridedError(\"renderItem\") }\r\n    renderAll() {\r\n        for (const el of this._targetElList()) {\r\n            const chartContent = el.__ChartContent__\r\n            try {\r\n                this.renderItem(el, chartContent)\r\n            } catch(err) {\r\n                this.renderErrResolver(err, el)\r\n            }\r\n        }\r\n    }\r\n}\r\n","export default \r\nfunction mergeObj(destObj={}, srcObj={}) {\r\n    for (const key of Object.keys(srcObj)) {\r\n        const isDestKeyObj = typeof destObj[key] === \"object\"\r\n        const isSrcKeyObj  = typeof srcObj [key] === \"object\"\r\n        const isKeyInDest  = key in destObj\r\n\r\n        if (isKeyInDest && !isDestKeyObj) {\r\n            continue\r\n        }\r\n        if (isKeyInDest && isDestKeyObj) {\r\n            if (isSrcKeyObj) {\r\n                mergeObj(destObj[key], srcObj[key])\r\n            }\r\n            continue\r\n        }\r\n        if (!isKeyInDest) {\r\n            if (isSrcKeyObj) {\r\n                let clonedObj\r\n                if (typeof structuredClone !== \"undefined\") {\r\n                    // if browser supports `structuredClone`\r\n                    clonedObj = structuredClone(srcObj[key])\r\n                } else {\r\n                    clonedObj = JSON.parse(JSON.stringify(srcObj[key]))\r\n                }\r\n                destObj[key] = clonedObj\r\n            } else {\r\n                destObj[key] = srcObj[key]\r\n            }\r\n        }\r\n    }\r\n    return destObj\r\n}\r\n","export default function debounce(callback, waitMillisecond) {\r\n    let timer = null\r\n\r\n    return function(...args) {\r\n        if (timer) {\r\n            clearTimeout(timer)\r\n        }\r\n\r\n        timer = setTimeout(() => {\r\n            return callback(...args)\r\n        }, waitMillisecond)\r\n    }\r\n}","import EventBus from \"./index.js\"\r\nconst eventbus = new EventBus()\r\nexport default eventbus\r\n","export default class EventBus {\r\n    // A map used to store events and handlers for events\r\n    events = new Map()\r\n\r\n    /**\r\n     * @name emit\r\n     * @description to trigger the handlers for the given event name\r\n     * @param { String | Symbol } name event name\r\n     * @param { Array<any> }      args use `...` to support multi-arg\r\n     */\r\n    emit(name, ...args) {\r\n        const targetEvent = this.events.get(name)\r\n\r\n        if (targetEvent) {\r\n            targetEvent.forEach((handler) => {\r\n                handler.apply(null, args)\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name on\r\n     * @description to add event listener & register the given event handler\r\n     * @param { String | Symbol } name event name\r\n     * @param { EventHandler } handler given handler to given event\r\n     */\r\n    on(name, handler) {\r\n        const targetEvent = this.events.get(name)\r\n\r\n        if (targetEvent) {\r\n            targetEvent.push(handler)\r\n        } else {\r\n            this.events.set(name, [handler])\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name off\r\n     * @description remove the given handler to the given event\r\n     * @param { String | Symbol } name event name\r\n     * @param { EventHandler } handler given handler to given event\r\n     */\r\n    off(name, handler) {\r\n        const targetEvent = this.events.get(name)\r\n\r\n        if (targetEvent) {\r\n            if (targetEvent.length === 1) {\r\n                this.events.delete(name)\r\n            } else {\r\n                const handlerIndex = targetEvent.indexOf(handler)\r\n                targetEvent.splice(handlerIndex, 1)\r\n            }\r\n        }\r\n    }\r\n}","import ChartImporter from \"./importer.js\"\r\nimport { config } from \"../../../utils/loadConfig.js\"\r\nimport mergeObj from \"../../../../common/mergeObj.js\"\r\nimport debounce from \"../../../../common/debounce.js\"\r\nimport eventbus from \"../../../../common/eventbus/inst.js\"\r\n\r\nlet [\r\n    echarts,\r\n    importChart,\r\n    importComponent,\r\n] = [null, null, null]\r\nconst globalOptions = config.echartsOptions\r\n\r\nfunction chartOptionResolver(options={}, libsToImport) {\r\n    const ignoredProps = [\r\n        \"width\",\r\n        \"height\",\r\n        \"color\",\r\n        \"backgroundColor\",\r\n        \"darkMode\",\r\n        \"textStyle\",\r\n        \"aria\",\r\n        \"axisPointer\",\r\n        \"animation\",\r\n        \"animationThreshold\",\r\n        \"animationDuration\",\r\n        \"animationEasing\",\r\n        \"animationDelay\",\r\n        \"animationDurationUpdate\",\r\n        \"animationEasingUpdate\",\r\n        \"animationDelayUpdate\",\r\n        \"stateAnimation\",\r\n        \"blendMode\",\r\n        \"hoverLayerThreshold\",\r\n        \"options\",\r\n        \"useUTC\",\r\n        \"media\",\r\n    ]\r\n\r\n    for (const key in options) {\r\n        if (ignoredProps.includes(key)) {\r\n            continue\r\n        }\r\n        if (key === \"series\") {\r\n            const { series } = options\r\n            if (!(series instanceof Array)) {\r\n                libsToImport.charts.add(series.type)\r\n                continue\r\n            }\r\n            for (const item of series) {\r\n                if (!(\"type\" in item)) {\r\n                    continue\r\n                }\r\n                libsToImport.charts.add(item.type)\r\n            }\r\n            continue\r\n        }\r\n\r\n        switch (key) {\r\n            case \"xAxis\":\r\n            case \"yAxis\":\r\n                libsToImport.components.add(\"grid\")\r\n                continue\r\n            case \"radiusAxis\":\r\n            case \"angleAxis\":\r\n                libsToImport.components.add(\"polar\")\r\n                continue\r\n            case \"parallelAxis\":\r\n                libsToImport.components.add(\"parallel\")\r\n                continue\r\n        }\r\n        libsToImport.components.add(key)\r\n    }\r\n}\r\n\r\nfunction specificChartResolver(options, isDarkMode) {\r\n    let resultObj = options\r\n    if (isDarkMode && \"calendar\" in options) {\r\n        const calendarChartDarkModeOptions = {\r\n            splitLine : { lineStyle: { color: \"white\" } },\r\n            dayLabel  : { color: \"#eee\" },\r\n            monthLabel: { color: \"#eee\" },\r\n            itemStyle : {\r\n                color : \"none\",\r\n                borderWidth: 0.5,\r\n            },\r\n        }\r\n        if (options.calendar instanceof Array) {\r\n            options.calendar.forEach(obj =>\r\n                mergeObj(obj, calendarChartDarkModeOptions))\r\n        } else {\r\n            mergeObj(options.calendar, calendarChartDarkModeOptions)\r\n        }\r\n    }\r\n    return resultObj\r\n}\r\n\r\nasync function importChartLibs(chartOptions) {\r\n    const libsToImport = {\r\n        charts: new Set(),\r\n        components: new Set(),\r\n    }\r\n    chartOptionResolver(globalOptions, libsToImport)\r\n    chartOptions.forEach(options =>\r\n        chartOptionResolver(options, libsToImport))\r\n\r\n    const chartsToImport = Array.from(libsToImport.charts).map(importChart)\r\n    const componentsToImport = Array.from(libsToImport.components).map(importComponent)\r\n    await Promise.all(chartsToImport.concat(componentsToImport))\r\n        .then(echarts.use)\r\n}\r\n\r\nclass EchartsImporter extends ChartImporter {\r\n    _targetElList = () => document.querySelectorAll(\".echarts-container\")\r\n\r\n    // event listeners\r\n    #darkmodeObserver = new MutationObserver(_ => {\r\n        for (const el of this._targetElList()) {\r\n            // rerender all chart elements to reset color theme\r\n            this._module.dispose(el)\r\n            this.renderItem(el)\r\n        }\r\n    })\r\n    #resizeEvent() {\r\n        this._targetElList()\r\n            .forEach(el =>\r\n                echarts.getInstanceByDom(el).resize())\r\n    }\r\n    #sizeSetter(el, options) {\r\n        if (options.width) {\r\n            el.style.minWidth = \"100%\"\r\n            el.style.width = options.width + \"px\"\r\n            delete options.width\r\n        }\r\n        if (options.height) {\r\n            el.style.height = options.height + \"px\"\r\n            delete options.height\r\n        }\r\n    }\r\n\r\n    // --- --- --- --- --- ---\r\n\r\n    renderItem(el) {\r\n        this.#sizeSetter(el, el.__ChartOptions__)\r\n\r\n        const isDarkMode = document.body.classList.contains(\"dark\")\r\n        const renderMode = isDarkMode ? \"another-dark\" : \"light\"\r\n        const chartInst  = this._module.init(el, renderMode)\r\n\r\n        // options clone\r\n        const globalOptionsCloned = structuredClone(globalOptions)\r\n        const currentOptionsCloned = structuredClone(el.__ChartOptions__)\r\n        // options merge\r\n        const specificResolved = specificChartResolver(currentOptionsCloned, isDarkMode)\r\n        const finalOptions = mergeObj(globalOptionsCloned, specificResolved)\r\n        chartInst.setOption(finalOptions)\r\n    }\r\n\r\n    async beforeRender() {\r\n        const chartOptions = Array.from(this._targetElList())\r\n            .map(el => el.__ChartOptions__)\r\n        try {\r\n            await importChartLibs(chartOptions)\r\n        } catch(err) {\r\n            this.loadErrResolver(err)\r\n        }\r\n    }\r\n\r\n    async importModule() {\r\n        const [module, darkTheme] = await Promise.all([\r\n            import(\"../../../libs/echarts/core.js\"),\r\n            import(\"./echartsAnotherDarkTheme.js\"),\r\n        ])\r\n        echarts         = module.default\r\n        importChart     = module.importChart\r\n        importComponent = module.importComponent\r\n        echarts.registerTheme(\"another-dark\", darkTheme.default)\r\n\r\n        // dark mode toggling listener\r\n        const body = document.body\r\n        this.#darkmodeObserver.observe(body, {\r\n            attributes: true,\r\n            attributeFilter: [\"class\"]\r\n        })\r\n\r\n        // resize event listeners\r\n        eventbus.on(\"catalog-toggle\", () => {\r\n            setTimeout(this.#resizeEvent.bind(this), 1000)\r\n        })\r\n        window.addEventListener(\"resize\",\r\n            debounce(this.#resizeEvent.bind(this), 200))\r\n        return echarts\r\n    }\r\n}\r\n\r\nconst inst = new EchartsImporter()\r\nexport default inst.render.bind(inst)\r\n"],"names":["UnOverridedError","Error","constructor","name","super","this","message","finalConfig","homepage","title","description","language","pageSize","preview","port","liveReload","catalog","enable","fab","buttons","rss","size","newest","search","pageThreshold","echartsOptions","tooltip","show","backgroundColor","qrcodeOptions","width","height","import","default","config","currentLang","langList","languageSelector","lang","index","langName","Object","entries","selections","console","warn","languageSelectorCreator","DynamicImporter","static","_module","_targetElList","importModule","props","beforeRender","loadCondition","renderItem","el","renderAll","err","renderErrResolver","loadErrResolver","error","forEach","textContent","loadErrMsg","renderErrMsg","render","ChartImporter","undefined","chartContent","__ChartContent__","mergeObj","destObj","srcObj","key","keys","isDestKeyObj","isSrcKeyObj","isKeyInDest","clonedObj","structuredClone","JSON","parse","stringify","debounce","callback","waitMillisecond","timer","args","clearTimeout","setTimeout","eventbus","events","Map","emit","targetEvent","get","handler","apply","on","push","set","off","length","delete","handlerIndex","indexOf","splice","echarts","importChart","importComponent","globalOptions","chartOptionResolver","options","libsToImport","ignoredProps","includes","components","add","series","Array","charts","type","item","inst","document","querySelectorAll","darkmodeObserver","MutationObserver","_","dispose","resizeEvent","getInstanceByDom","resize","sizeSetter","style","minWidth","__ChartOptions__","isDarkMode","body","classList","contains","renderMode","chartInst","init","globalOptionsCloned","specificResolved","resultObj","calendarChartDarkModeOptions","splitLine","lineStyle","color","dayLabel","monthLabel","itemStyle","borderWidth","calendar","obj","specificChartResolver","finalOptions","setOption","chartOptions","from","map","async","Set","chartsToImport","componentsToImport","Promise","all","concat","then","use","importChartLibs","module","darkTheme","registerTheme","observe","attributes","attributeFilter","bind","window","addEventListener","echartsRender"],"mappings":"AAAe,MAAMA,UAAyBC,MAC1C,WAAAC,CAAYC,GACRC,QACAC,KAAKC,QACD,IAAIH,mDACX,ECJL,IAAII,ECAW,CACXC,SAAU,2BACVC,MAAO,uBACPC,YAAa,uBACbC,SAAU,KACVC,SAAU,GAEVC,QAAS,CACLC,KAAM,KACNC,YAAY,GAGhBC,QAAS,CACLC,QAAQ,GAEZC,IAAK,CACDD,QAAQ,EACRE,QAAS,CACL,kBACA,eACA,cACA,eACA,cAGRC,IAAK,CACDH,QAAQ,EACRI,KAAM,IAEVC,OAAQ,CACJL,QAAQ,EACRL,SAAU,IAEdW,OAAQ,CACJN,QAAQ,EACRO,cAAe,KAGnBC,eAAgB,CACZC,QAAS,CACLC,MAAM,EACNC,gBAAiB,wBAIzBC,cAAe,CACXC,MAAO,IACPC,OAAQ,MD9ChB,IAEIxB,SAD2ByB,OAAO,+BACPC,OAC/B,CAAE,MAAQ,CAEE,MAACC,EAAS3B,EELhB4B,EAAcD,EAAOvB,SACrByB,EAAW,CAAC,KAAM,MAWnB,MAACC,EAVN,SAAiCC,GAC7B,IAAK,MAAOC,EAAOC,KAAaC,OAAOC,QAAQN,GAC3C,GAAIE,IAASE,EACT,MAAO,IAAIG,IAAeA,EAAWJ,GAK7C,OAFAK,QAAQC,KAAK,wBAA0BP,GAEhC,IAAIK,IAAeA,EAAW,EACzC,CACyBG,CAAwBX,GCXlC,MAAMY,EACjBC,kBAAsBX,EAAiB,OAAQ,cAC/CW,oBAAsBX,EAAiB,OAAQ,gBAE/ClC,KAAO,GACP8C,QAAU,KACVC,cAAgB,KAEhB,kBAAMC,CAAaC,GAAS,MAAM,IAAIpD,EAAiB,eAAiB,CACxE,kBAAMqD,CAAaD,GAAS,CAC5B,aAAAE,CAAcF,GAAS,MAAM,IAAIpD,EAAiB,gBAAkB,CACpE,UAAAuD,CAAWC,GAAM,MAAM,IAAIxD,EAAiB,aAAe,CAE3D,SAAAyD,CAAUL,GACN,IAAK,MAAMI,KAAMnD,KAAK6C,gBAClB,IACI7C,KAAKkD,WAAWC,EACnB,CAAC,MAAME,GACJrD,KAAKsD,kBAAkBD,EAAKF,EAC/B,CAER,CAED,eAAAI,CAAgBF,GACZd,QAAQiB,MAAMH,GACdrD,KAAK6C,gBAAgBY,SAAQN,GACzBA,EAAGO,YAAc1D,KAAKF,KAAO,IAAM4C,EAAgBiB,YAC1D,CACD,iBAAAL,CAAkBD,EAAKF,GACnBZ,QAAQiB,MAAMH,GACdF,EAAGO,YAAc1D,KAAKF,KAAO,IAAM4C,EAAgBkB,YACtD,CAED,YAAMC,CAAOd,GACT,GAAK/C,KAAKiD,cAAcF,GAAxB,CAGA,GAAqB,OAAjB/C,KAAK4C,QACL,IACI5C,KAAK4C,cAAgB5C,KAAK8C,aAAaC,EAC1C,CAAC,MAAMM,GAEJ,YADArD,KAAKuD,gBAAgBF,EAExB,OAECrD,KAAKgD,aAAaD,GACxB/C,KAAKoD,UAAUL,EAVd,CAWJ,EC9CU,MAAMe,UAAsBpB,EACvCC,kBAAsBX,EAAiB,SAAU,oBACjDW,oBAAsBX,EAAiB,SAAU,sBAEjDlC,UAAOiE,EAEP,aAAAd,GAAkB,OAAO,CAAM,CAE/B,eAAAM,CAAgBF,GACZd,QAAQiB,MAAMH,GACdrD,KAAK6C,gBAAgBY,SAAQN,GACzBA,EAAGO,YAAcI,EAAcH,YACtC,CACD,iBAAAL,CAAkBD,EAAKF,GACnBZ,QAAQiB,MAAMH,GACdF,EAAGO,YAAcI,EAAcF,YAClC,CAED,UAAAV,CAAWC,EAAIa,GAAgB,MAAM,IAAIrE,EAAiB,aAAe,CACzE,SAAAyD,GACI,IAAK,MAAMD,KAAMnD,KAAK6C,gBAAiB,CACnC,MAAMmB,EAAeb,EAAGc,iBACxB,IACIjE,KAAKkD,WAAWC,EAAIa,EACvB,CAAC,MAAMX,GACJrD,KAAKsD,kBAAkBD,EAAKF,EAC/B,CACJ,CACJ,EC/BL,SAASe,EAASC,EAAQ,GAAIC,EAAO,CAAA,GACjC,IAAK,MAAMC,KAAOjC,OAAOkC,KAAKF,GAAS,CACnC,MAAMG,EAAuC,iBAAjBJ,EAAQE,GAC9BG,EAAuC,iBAAjBJ,EAAQC,GAC9BI,EAAeJ,KAAOF,EAE5B,IAAIM,GAAgBF,EAGpB,GAAIE,GAAeF,EACXC,GACAN,EAASC,EAAQE,GAAMD,EAAOC,SAItC,IAAKI,EACD,GAAID,EAAa,CACb,IAAIE,EAGAA,EAF2B,oBAApBC,gBAEKA,gBAAgBP,EAAOC,IAEvBO,KAAKC,MAAMD,KAAKE,UAAUV,EAAOC,KAEjDF,EAAQE,GAAOK,CAC/B,MACgBP,EAAQE,GAAOD,EAAOC,EAGjC,CACD,OAAOF,CACX,CChCe,SAASY,EAASC,EAAUC,GACvC,IAAIC,EAAQ,KAEZ,OAAO,YAAYC,GACXD,GACAE,aAAaF,GAGjBA,EAAQG,YAAW,IACRL,KAAYG,IACpBF,EACN,CACL,CCXK,MAACK,EAAW,ICDF,MAEXC,OAAS,IAAIC,IAQb,IAAAC,CAAK3F,KAASqF,GACV,MAAMO,EAAc1F,KAAKuF,OAAOI,IAAI7F,GAEhC4F,GACAA,EAAYjC,SAASmC,IACjBA,EAAQC,MAAM,KAAMV,EAAK,GAGpC,CAQD,EAAAW,CAAGhG,EAAM8F,GACL,MAAMF,EAAc1F,KAAKuF,OAAOI,IAAI7F,GAEhC4F,EACAA,EAAYK,KAAKH,GAEjB5F,KAAKuF,OAAOS,IAAIlG,EAAM,CAAC8F,GAE9B,CAQD,GAAAK,CAAInG,EAAM8F,GACN,MAAMF,EAAc1F,KAAKuF,OAAOI,IAAI7F,GAEpC,GAAI4F,EACA,GAA2B,IAAvBA,EAAYQ,OACZlG,KAAKuF,OAAOY,OAAOrG,OAChB,CACH,MAAMsG,EAAeV,EAAYW,QAAQT,GACzCF,EAAYY,OAAOF,EAAc,EACpC,CAER,GC/CL,IACIG,EACAC,EACAC,GACA,CAAC,KAAM,KAAM,MACjB,MAAMC,EAAgB7E,EAAOT,eAE7B,SAASuF,EAAoBC,EAAQ,CAAE,EAAEC,GACrC,MAAMC,EAAe,CACjB,QACA,SACA,QACA,kBACA,WACA,YACA,OACA,cACA,YACA,qBACA,oBACA,kBACA,iBACA,0BACA,wBACA,uBACA,iBACA,YACA,sBACA,UACA,SACA,SAGJ,IAAK,MAAMzC,KAAOuC,EACd,IAAIE,EAAaC,SAAS1C,GAG1B,GAAY,WAARA,EAAJ,CAeA,OAAQA,GACJ,IAAK,QACL,IAAK,QACDwC,EAAaG,WAAWC,IAAI,QAC5B,SACJ,IAAK,aACL,IAAK,YACDJ,EAAaG,WAAWC,IAAI,SAC5B,SACJ,IAAK,eACDJ,EAAaG,WAAWC,IAAI,YAC5B,SAERJ,EAAaG,WAAWC,IAAI5C,EAf3B,KAbD,CACI,MAAM6C,OAAEA,GAAWN,EACnB,KAAMM,aAAkBC,OAAQ,CAC5BN,EAAaO,OAAOH,IAAIC,EAAOG,MAC/B,QACH,CACD,IAAK,MAAMC,KAAQJ,EACT,SAAUI,GAGhBT,EAAaO,OAAOH,IAAIK,EAAKD,KAGpC,CAiBT,CA0HA,MAAME,EAAO,IAnFb,cAA8BzD,EAC1BjB,cAAgB,IAAM2E,SAASC,iBAAiB,sBAGhDC,GAAoB,IAAIC,kBAAiBC,IACrC,IAAK,MAAMzE,KAAMnD,KAAK6C,gBAElB7C,KAAK4C,QAAQiF,QAAQ1E,GACrBnD,KAAKkD,WAAWC,EACnB,IAEL,EAAA2E,GACI9H,KAAK6C,gBACAY,SAAQN,GACLoD,EAAQwB,iBAAiB5E,GAAI6E,UACxC,CACD,EAAAC,CAAY9E,EAAIyD,GACRA,EAAQnF,QACR0B,EAAG+E,MAAMC,SAAW,OACpBhF,EAAG+E,MAAMzG,MAAQmF,EAAQnF,MAAQ,YAC1BmF,EAAQnF,OAEfmF,EAAQlF,SACRyB,EAAG+E,MAAMxG,OAASkF,EAAQlF,OAAS,YAC5BkF,EAAQlF,OAEtB,CAID,UAAAwB,CAAWC,GACPnD,MAAKiI,EAAY9E,EAAIA,EAAGiF,kBAExB,MAAMC,EAAab,SAASc,KAAKC,UAAUC,SAAS,QAC9CC,EAAaJ,EAAa,eAAiB,QAC3CK,EAAa1I,KAAK4C,QAAQ+F,KAAKxF,EAAIsF,GAGnCG,EAAsBjE,gBAAgB+B,GAGtCmC,EA9Ed,SAA+BjC,EAASyB,GACpC,IAAIS,EAAYlC,EAChB,GAAIyB,GAAc,aAAczB,EAAS,CACrC,MAAMmC,EAA+B,CACjCC,UAAY,CAAEC,UAAW,CAAEC,MAAO,UAClCC,SAAY,CAAED,MAAO,QACrBE,WAAY,CAAEF,MAAO,QACrBG,UAAY,CACRH,MAAQ,OACRI,YAAa,KAGjB1C,EAAQ2C,oBAAoBpC,MAC5BP,EAAQ2C,SAAS9F,SAAQ+F,GACrBtF,EAASsF,EAAKT,KAElB7E,EAAS0C,EAAQ2C,SAAUR,EAElC,CACD,OAAOD,CACX,CA0DiCW,CAFI9E,gBAAgBxB,EAAGiF,kBAEqBC,GAC/DqB,EAAexF,EAAS0E,EAAqBC,GACnDH,EAAUiB,UAAUD,EACvB,CAED,kBAAM1G,GACF,MAAM4G,EAAezC,MAAM0C,KAAK7J,KAAK6C,iBAChCiH,KAAI3G,GAAMA,EAAGiF,mBAClB,UAhER2B,eAA+BH,GAC3B,MAAM/C,EAAe,CACjBO,OAAQ,IAAI4C,IACZhD,WAAY,IAAIgD,KAEpBrD,EAAoBD,EAAeG,GACnC+C,EAAanG,SAAQmD,GACjBD,EAAoBC,EAASC,KAEjC,MAAMoD,EAAiB9C,MAAM0C,KAAKhD,EAAaO,QAAQ0C,IAAItD,GACrD0D,EAAqB/C,MAAM0C,KAAKhD,EAAaG,YAAY8C,IAAIrD,SAC7D0D,QAAQC,IAAIH,EAAeI,OAAOH,IACnCI,KAAK/D,EAAQgE,IACtB,CAoDkBC,CAAgBZ,EACzB,CAAC,MAAMvG,GACJrD,KAAKuD,gBAAgBF,EACxB,CACJ,CAED,kBAAMP,GACF,MAAO2H,EAAQC,SAAmBP,QAAQC,IAAI,CAC1CzI,OAAO,2BACPA,OAAO,sCAEX4E,EAAkBkE,EAAO7I,QACzB4E,EAAkBiE,EAAOjE,YACzBC,EAAkBgE,EAAOhE,gBACzBF,EAAQoE,cAAc,eAAgBD,EAAU9I,SAGhD,MAAM0G,EAAOd,SAASc,KAYtB,OAXAtI,MAAK0H,EAAkBkD,QAAQtC,EAAM,CACjCuC,YAAY,EACZC,gBAAiB,CAAC,WAItBxF,EAASQ,GAAG,kBAAkB,KAC1BT,WAAWrF,MAAK8H,EAAaiD,KAAK/K,MAAO,IAAK,IAElDgL,OAAOC,iBAAiB,SACpBlG,EAAS/E,MAAK8H,EAAaiD,KAAK/K,MAAO,MACpCuG,CACV,GAIL,IAAA2E,EAAe3D,EAAK1D,OAAOkH,KAAKxD"}